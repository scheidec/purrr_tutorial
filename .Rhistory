repo_info = gh_repos %>%
map(. %>% map_df(`[`, c("name", "fork", "open_issues")))
)
(rdf <- udf %>%
mutate(
repo_info = gh_repos %>%
map(. %>% map_df(`[`, c("name", "fork", "open_issues")))
) %>%
select(-gh_repos) %>%
tidyr::unnest())
View(rdf)
rdf %>%
filter(!fork) %>%
select(-fork) %>%
group_by(username) %>%
arrange(username, desc(open_issues)) %>%
slice(1:3)
aliases <- set_names(map(got_chars, "aliases"),
map_chr(got_chars, "name"))
(aliases <- aliases[c("Theon Greyjoy", "Asha Greyjoy", "Brienn of Tarth")])
my_fun <- function(x) paste(x, collapse = " | ")
map(aliases, my_fun)
aliases <- set_names(map(got_chars, "aliases"),
map_chr(got_chars, "name"))
(aliases <- aliases[c("Theon Greyjoy", "Asha Greyjoy", "Brienne of Tarth")])
my_fun <- function(x) paste(x, collapse = " | ")
map(aliases, my_fun)
map(aliases, function(x) paste(x, collapse = " | "))
map(aliases, paste, collapse = " | ")
map(aliases, ~ paste(.x, collapse = " | "))
(a <- map(got_chars, "aliases")[[19]]) #OOPS! empty, so useless
(a <- map(got_chars, "aliases")[[16]])
paste(a, collapse = " | ")
got_chars[15:17] %>%
map("aliases") %>%
map_chr(paste, collapse = " | ")
aliases <- set_names(map(got_chars, "aliases"), map_chr(got_chars, "name"))
map_chr(aliases[c(3, 10, 20, 24)], ~ paste(.x, collapse = " | ")) %>%
tibble::enframe(value = "aliases")
aliases_df <- map_chr(aliases[c(3, 10, 20, 24)], ~ paste(.x, collapse = " | ")) %>%
tibble::enframe(value = "aliases")
nms <- got_chars %>%
map_chr("name")
birth <- got_chars %>%
map_chr("born")
my_fun <- function(x, y) paste(x, "was born", y)
map2_chr(nms, birth, my_fun) %>%
head %>%
kable
map2_chr(nms, birth, my_fun) %>%
head
map2_chr(nms, birth, function(x, y) paste(x, "was born", y)) %>% head()
map2_chr(nms[16:18], birth[16:18], ~ paste(.x, "was born", .y)) %>% tail()
df <- got_chars %>% {
tibble::tibble(
name = map_chr(., "name"),
aliases = map(., "aliases"),
allegiances = map(., "allegiances")
)
}
View(df)
my_fun <- function(name, aliases, allegiances) {
paste(name, "has", length(aliases), "aliases and", length(allegiances), "allegiances")
}
df %>%
pmap_chr(my_fun) %>%
tail()
load(url("http://varianceexplained.org/files/trump_tweets_df.rda"))
glimpse(trump_tweets_df)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(purrr)
library(devtools)
library(repurrrsive)
library(listviewer)
library(knitr)
library(tibble)
library(tidyverse)
# Chunk 2
map(c(9, 16, 26), sqrt)
#name and position shortcuts
map(got_chars[1:4], "name")
map(got_chars[5:8], 3) #name is in third position
#can rewrite using the pipe
got_chars %>%
map("name")
got_chars %>%
map(3)
# Chunk 3
map_chr(got_chars[9:12], "name")
map_int(got_chars[9:12], "id")
map_lgl(got_chars[9:12], "alive")
# Chunk 4
#how to retrieve multiple elements without using map()
got_chars[[3]][c("name", "culture", "gender", "born")]
x <- map(got_chars, `[`, c("name", "culture", "gender", "born"))
str(x[16:17])
#This can be rewritten using the pipe and extract() function from magrittr:
library(magrittr)
#using pipe
x <- got_chars %>%
map(extract,  c("name", "culture", "gender", "born"))
str(x[18:19])
# Chunk 5
got_char <- map_df(got_chars, extract, c("name", "culture", "gender", "id", "born", "alive"))
# Chunk 6
str(gh_users, max.level = 1)
str(gh_users[[1]], list.len = 6)
# Chunk 7
map_chr(gh_users, "login")
#output to data frame
gh_users_df <- gh_users %>%
map_df(extract, c("login", "name", "id", "location"))
gh_users_df %>%
head %>%
kable()
# Chunk 8
str(gh_repos, max.level = 2)
# Chunk 9
gh_repos %>%
map_chr(c(1,3))
# Chunk 10
(unames <- map_chr(gh_repos, c(1, 4, 1)))
(udf <- gh_repos %>%
set_names(unames) %>%
tibble::enframe("username", "gh_repos"))
# Chunk 11
udf %>%
mutate(n_repos = map_int(gh_repos, length))
# Chunk 12
#one_user is a list of repos for one user
one_user <- udf$gh_repos[[1]]
#one_user[[1]] is a list of infor for one repo
one_repo <- one_user[[1]]
str(one_repo, max.level = 1, list.len = 5)
#a highly selective list of tibble-worthy info for one repo
one_repo[c("name", "fork", "open_issues")]
#make a data frame of that info for all a user's repos
map_df(one_user, `[`, c("name", "fork", "open_issues"))
# Chunk 13
udf %>%
mutate(
repo_info = gh_repos %>%
map(. %>% map_df(`[`, c("name", "fork", "open_issues")))
)
# Chunk 14
(rdf <- udf %>%
mutate(
repo_info = gh_repos %>%
map(. %>% map_df(`[`, c("name", "fork", "open_issues")))
) %>%
select(-gh_repos) %>%
tidyr::unnest())
# Chunk 15
rdf %>%
filter(!fork) %>%
select(-fork) %>%
group_by(username) %>%
arrange(username, desc(open_issues)) %>%
slice(1:3)
# Chunk 16
aliases <- set_names(map(got_chars, "aliases"),
map_chr(got_chars, "name"))
(aliases <- aliases[c("Theon Greyjoy", "Asha Greyjoy", "Brienne of Tarth")])
# Chunk 17
my_fun <- function(x) paste(x, collapse = " | ")
map(aliases, my_fun)
# Chunk 18
map(aliases, function(x) paste(x, collapse = " | "))
#or rewrite it as
map(aliases, paste, collapse = " | ")
# Chunk 19
map(aliases, ~ paste(.x, collapse = " | "))
# Chunk 20
(a <- map(got_chars, "aliases")[[19]]) #OOPS! empty, so useless
(a <- map(got_chars, "aliases")[[16]]) #ok good
paste(a, collapse = " | ") #ok good
#Now we know what's up
got_chars[15:17] %>%
map("aliases") %>%
map_chr(paste, collapse = " | ")
# Chunk 21
aliases <- set_names(map(got_chars, "aliases"), map_chr(got_chars, "name"))
aliases_df <- map_chr(aliases[c(3, 10, 20, 24)], ~ paste(.x, collapse = " | ")) %>%
tibble::enframe(value = "aliases")
aliases_df %>%
head() %>%
kable()
# Chunk 22
nms <- got_chars %>%
map_chr("name")
birth <- got_chars %>%
map_chr("born")
# Chunk 23
my_fun <- function(x, y) paste(x, "was born", y)
map2_chr(nms, birth, my_fun) %>%
head
# Chunk 24
map2_chr(nms, birth, function(x, y) paste(x, "was born", y)) %>% head()
# Chunk 25
map2_chr(nms[16:18], birth[16:18], ~ paste(.x, "was born", .y)) %>% tail()
# Chunk 26
df <- got_chars %>% {
tibble::tibble(
name = map_chr(., "name"),
aliases = map(., "aliases"),
allegiances = map(., "allegiances")
)
}
my_fun <- function(name, aliases, allegiances) {
paste(name, "has", length(aliases), "aliases and", length(allegiances), "allegiances")
}
df %>%
pmap_chr(my_fun) %>%
tail()
glimpse(trump_tweets_df)
tweets %>%
head() %>%
strtrim(70)
tweets <- trump_tweets_df$text
tweets %>%
head() %>%
strtrim(70)
regex <- "badly|crazy|weak|spent|strong|dumb|joke|guns|funny|dead"
tweets <- tweets[c(1, 2, 5, 6, 198, 347, 919)]
tweets %>%
strtrim(70)
matches <- gregexpr(regex, tweets)
str(matches)
?gregexpr
matches[[7]]
?substring
lengths(matches)
map_int(matches, length) # purrr way
m <- matches[[7]]
attr(m, which = "match.length")
ml <- function(x) attr(x, which = "match.length")
map(matches, ml)
map(matches, ~ attr(.x, which = "match.length"))
(match_length <- map(matches, attr, which = "match.length"))
m <- matches[[1]]
sum(m > 0)
m <- matches[[7]]
sum(m > 0)
f <- function(x) sum(x > 0)
map(matches, f)
map(matches, ~ sum(.x > 0))
map_int(matches, ~ sum(.x > 0))
tibble(
naive_length = lengths(matches),
n_words = map_int(matches, ~ sum(.x > 0))
)
match_length
(match_first <- map(matches, as.vector))
(tweet <- tweets[7])
(t_first <- match_first[[7]])
(t_last <- t_first + t_length - 1)
(t_length <- match_length[[7]])
(t_last <- t_first + t_length - 1)
substring(tweet, t_first, t_last)
(tweet <- tweets[1])
(t_first <- match_first[[1]])
(t_length <- match_length[[1]])
(t_last <- t_first + t_length - 1)
substring(tweet, t_first, t_last)
(match_last <- map2(match_first, match_length, ~ .x + .y - 1))
pmap(list(text = tweets, first = match_first, last = match_last), substring)
mdf <- tibble(
text = tweets,
first = match_first,
last = match_last
)
View(mdf)
mdf <- tibble(
text = tweets,
first = match_first,
last = match_last
)
mdf %>%
pmap(substring)
tibble(text = tweets,
first = gregexpr(regex, tweets)) %>%
mutate(match_length = map(first, ~ attr(.x, which = "match.length")),
last = map2(first, match_length, ~ .x + .y - 1)) %>%
select(-match_length) %>%
pmap(substring)
packrat::init()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
#packrat::init()
library(purrr)
library(devtools)
library(repurrrsive)
library(listviewer)
library(knitr)
library(tibble)
library(tidyverse)
# Chunk 2
map(c(9, 16, 26), sqrt)
#name and position shortcuts
map(got_chars[1:4], "name")
map(got_chars[5:8], 3) #name is in third position
#can rewrite using the pipe
got_chars %>%
map("name")
got_chars %>%
map(3)
# Chunk 3
map_chr(got_chars[9:12], "name")
map_int(got_chars[9:12], "id")
map_lgl(got_chars[9:12], "alive")
# Chunk 4
#how to retrieve multiple elements without using map()
got_chars[[3]][c("name", "culture", "gender", "born")]
x <- map(got_chars, `[`, c("name", "culture", "gender", "born"))
str(x[16:17])
#This can be rewritten using the pipe and extract() function from magrittr:
library(magrittr)
#using pipe
x <- got_chars %>%
map(extract,  c("name", "culture", "gender", "born"))
str(x[18:19])
# Chunk 5
got_char <- map_df(got_chars, extract, c("name", "culture", "gender", "id", "born", "alive"))
# Chunk 6
str(gh_users, max.level = 1)
str(gh_users[[1]], list.len = 6)
# Chunk 7
map_chr(gh_users, "login")
#output to data frame
gh_users_df <- gh_users %>%
map_df(extract, c("login", "name", "id", "location"))
gh_users_df %>%
head %>%
kable()
# Chunk 8
str(gh_repos, max.level = 2)
# Chunk 9
gh_repos %>%
map_chr(c(1,3))
# Chunk 10
(unames <- map_chr(gh_repos, c(1, 4, 1)))
(udf <- gh_repos %>%
set_names(unames) %>%
tibble::enframe("username", "gh_repos"))
# Chunk 11
udf %>%
mutate(n_repos = map_int(gh_repos, length))
# Chunk 12
#one_user is a list of repos for one user
one_user <- udf$gh_repos[[1]]
#one_user[[1]] is a list of infor for one repo
one_repo <- one_user[[1]]
str(one_repo, max.level = 1, list.len = 5)
#a highly selective list of tibble-worthy info for one repo
one_repo[c("name", "fork", "open_issues")]
#make a data frame of that info for all a user's repos
map_df(one_user, `[`, c("name", "fork", "open_issues"))
# Chunk 13
udf %>%
mutate(
repo_info = gh_repos %>%
map(. %>% map_df(`[`, c("name", "fork", "open_issues")))
)
# Chunk 14
(rdf <- udf %>%
mutate(
repo_info = gh_repos %>%
map(. %>% map_df(`[`, c("name", "fork", "open_issues")))
) %>%
select(-gh_repos) %>%
tidyr::unnest())
# Chunk 15
rdf %>%
filter(!fork) %>%
select(-fork) %>%
group_by(username) %>%
arrange(username, desc(open_issues)) %>%
slice(1:3)
# Chunk 16
aliases <- set_names(map(got_chars, "aliases"),
map_chr(got_chars, "name"))
(aliases <- aliases[c("Theon Greyjoy", "Asha Greyjoy", "Brienne of Tarth")])
# Chunk 17
my_fun <- function(x) paste(x, collapse = " | ")
map(aliases, my_fun)
# Chunk 18
map(aliases, function(x) paste(x, collapse = " | "))
#or rewrite it as
map(aliases, paste, collapse = " | ")
# Chunk 19
map(aliases, ~ paste(.x, collapse = " | "))
# Chunk 20
(a <- map(got_chars, "aliases")[[19]]) #OOPS! empty, so useless
(a <- map(got_chars, "aliases")[[16]]) #ok good
paste(a, collapse = " | ") #ok good
#Now we know what's up
got_chars[15:17] %>%
map("aliases") %>%
map_chr(paste, collapse = " | ")
# Chunk 21
aliases <- set_names(map(got_chars, "aliases"), map_chr(got_chars, "name"))
aliases_df <- map_chr(aliases[c(3, 10, 20, 24)], ~ paste(.x, collapse = " | ")) %>%
tibble::enframe(value = "aliases")
aliases_df %>%
head() %>%
kable()
# Chunk 22
nms <- got_chars %>%
map_chr("name")
birth <- got_chars %>%
map_chr("born")
# Chunk 23
my_fun <- function(x, y) paste(x, "was born", y)
map2_chr(nms, birth, my_fun) %>%
head
# Chunk 24
map2_chr(nms, birth, function(x, y) paste(x, "was born", y)) %>% head()
# Chunk 25
map2_chr(nms[16:18], birth[16:18], ~ paste(.x, "was born", .y)) %>% tail()
# Chunk 26
df <- got_chars %>% {
tibble::tibble(
name = map_chr(., "name"),
aliases = map(., "aliases"),
allegiances = map(., "allegiances")
)
}
my_fun <- function(name, aliases, allegiances) {
paste(name, "has", length(aliases), "aliases and", length(allegiances), "allegiances")
}
df %>%
pmap_chr(my_fun) %>%
tail()
# Chunk 27
load(url("http://varianceexplained.org/files/trump_tweets_df.rda"))
tweets <- trump_tweets_df$text
tweets %>%
head() %>%
strtrim(70)
# Chunk 28
regex <- "badly|crazy|weak|spent|strong|dumb|joke|guns|funny|dead"
# Chunk 29
tweets <- tweets[c(1, 2, 5, 6, 198, 347, 919)]
tweets %>%
strtrim(70)
# Chunk 30
matches <- gregexpr(regex, tweets)
str(matches)
matches[[7]]
# Chunk 31
lengths(matches) # just happens to exist for length
map_int(matches, length) # purrr way
# Chunk 32
m <- matches[[7]]
attr(m, which = "match.length")
# Chunk 33
ml <- function(x) attr(x, which = "match.length")
map(matches, ml)
# Chunk 34
map(matches, ~ attr(.x, which = "match.length"))
# Chunk 35
(match_length <- map(matches, attr, which = "match.length"))
# Chunk 36
m <- matches[[1]]
sum(m > 0)
m <- matches[[7]]
sum(m > 0)
# Chunk 37
f <- function(x) sum(x > 0)
map(matches, f)
#or
map(matches, ~ sum(.x > 0))
# Chunk 38
map_int(matches, ~ sum(.x > 0))
# Chunk 39
tibble(
naive_length = lengths(matches),
n_words = map_int(matches, ~ sum(.x > 0))
)
# Chunk 40
(match_first <- map(matches, as.vector))
# Chunk 41
(tweet <- tweets[7])
(t_first <- match_first[[7]])
(t_length <- match_length[[7]])
(t_last <- t_first + t_length - 1)
substring(tweet, t_first, t_last)
# Chunk 42
(tweet <- tweets[1])
(t_first <- match_first[[1]])
(t_length <- match_length[[1]])
(t_last <- t_first + t_length - 1)
substring(tweet, t_first, t_last)
# Chunk 43
(match_last <- map2(match_first, match_length, ~ .x + .y - 1))
# Chunk 44
pmap(list(text = tweets, first = match_first, last = match_last), substring)
# Chunk 45
mdf <- tibble(
text = tweets,
first = match_first,
last = match_last
)
mdf %>%
pmap(substring)
tibble(text = tweets,
first = gregexpr(regex, tweets)) %>%
mutate(match_length = map(first, ~ attr(.x, which = "match.length")),
last = map2(first, match_length, ~ .x + .y - 1)) %>%
select(-match_length) %>%
pmap(substring)
